<html>
<head><title>Router: ${path}</title>
<style>
textarea{
width:99%;
    background:#eee;
    min-height:200px;
}
table{
    width:98%;
    border-collapse:collapse;
}
th,td{
    border:2px solid #f6f;
}
th{
    width:15%;
    text-align:left;
}
td:nth-child(2){
    width:20%;;

}
td:nth-child(3){
    width:15%;
    text-overflow:ellipsis;
}
td:nth-child(4){
    width:15%;
}
.group{
    border:3px double #696;
    padding:5px;
    opacity:.2;
}
.group:hover{
    opacity:1
}
h2,h4{
    font-weight:bolder;
    background:#eee;
}

.method{
    display:inline-block;
    width:80px;
}
.test{
    display:inline-block;
    margin:2px;
    padding:0 10px;
    border-radius:3px;
    border:1px solid #666;
    background:#eee;
}
</style>

</head>
<body>
<h2><a style="margin-right:40px" href='/$/api/'>â†‘</a> Router:  ${path} &#160;
    <span style="margin-left:40px" c:if="${title}">(${title})</span></h2>
<ul>
    <li c:for="${n : method}">
        <a class="method" href="#${path}__${n}">${n.toUpperCase()}</a>
        <a class="test" title="click to test" href="#" onclick="doTest(this,${JSON.stringify(n)},${JSON.stringify(path)})">test</a>
    </li>
</ul>
<div class="group" c:for="${n:method}">
    <a name="${path}__${n}"/>
    <c:var name ="m" value="${method[n]}"/>
    <c:var name ="v" value="${m.config.validator}"/>
    <h4>${n.toUpperCase()} Request</h4>

    <c:var name="props" value="${v.request.properties}"/>
    <table border="1" cellpadding="5px" cellspacing="0">
        <tr c:for="${pn:props}">
            <c:var name="pv" value="${props[pn]}"/>
            <th>${pn}</th>
            <td>
                <c:if test="${pv.$ref}"><a href="#${util.genid(path,pv.$ref)}">${pv.$ref.replace('/definitions/','')}</a></c:if>
                <c:else test="${pv.items && pv.items.$ref}">array(
                        <a href="#${util.genid(path,pv.items.$ref)}">${pv.items.$ref.replace('/definitions/','')}</a>
                    )</c:else>
                <c:else>${pv.type} <span c:if="${pv.class}">(${pv.class})</span></c:else></td>
            <td>${pv.optional?'optional':'required'}</td>
            <td><pre>${util.genTips(pv)}</pre></td>
            <td>${pv.description||'&nbsp;'}</td>
        </tr>
    </table>
    <h4>${n.toUpperCase()} Response</h4>
    <c:var name="props" value="${v.response.properties}"/>
    <c:include selector="table"/>
    <c:for var="refName" list="${v.refs}">
        <a name="${util.genid(path,refName)}"/>
        <h4>${refName.replace('/definitions/','')}</h4>
        <c:var name="refValue" value="${v.refs[refName]}"/>
        <c:var name="props" value="${refValue.properties}"/>
        <c:include selector="table"/>
    </c:for>

    <h4>Action Impl Code</h4>
    <textarea>${m.impl}</textarea>
</div>

<script>//<![CDATA[
function doTest(thiz,method,path){
    if(/get/i.test(method)){
        var url = path.replace(/\:(\w+)/,function(a){
            return prompt(a,'');
        })
        thiz.href = (url);
    }else{
        var map = {}
        var url = path.replace(/\:(\w+)/,function(a,key){
            return map[key]= prompt(a,'');
        })
        var json = prompt('input '+method+' data',JSON.stringify(map));
        if(json.match(/^\s*\{/)){
            try{
                map = JSON.parse(json);
            }catch(e){
                console.log(e);
                alert('invalid json:'+e+json)
                return false;
            }
            var isJSON = true;
        }else{//url encoded
            map = {};
            json.replace(/([^=]+)(?:=([^\u0026]*))/g,function(a,key,value){
                key = decodeURIComponent(key);
                value = decodeURIComponent(value);
                if(key in map){
                    map[key] = [].concat(map[key],value)
                }else{
                    map[key] = value;
                }
            })
        }
        var url = path.replace(/\:(\w+)/,function(a,key){
            var value = map[key];
            delete map[key];
            return value;
        })

        function encodeParam(map){
            var buf = [];
            for(var n in map){
                var v = map[n];
                n = encodeURIComponent(n);
                if(v instanceof Array){
                    buf.push(v.map(function (a){return n+'[]='+encodeURIComponent(a)}))
                }
                buf.push(n+'='+encodeURIComponent(v))
            }
            return buf.join('\u0026');
        }
        var postData = isJSON ? JSON.stringify(map):encodeParam(map);
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function(){
            if(xhr.readyState == 4){
                alert('test result:\n'+xhr.responseText);
            }
        }
        xhr.open(method.toUpperCase(),url,true)
        xhr.setRequestHeader("Content-Type",
            isJSON?"application/json":"application/x-www-form-urlencoded")
        xhr.send(postData);
        return false;
    }
}
//]]>
</script>
</body>
</html>